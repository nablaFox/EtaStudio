material is not an asset. What we were specifying in material is actually the RendererComponent

RendererComponent:
 - pipelineConfigs
 - material properties
 - texture1 (hash name)
 - texture2 (hash name)
 - AllocatedImage image1;
 - AllocatedImage image2;
 - descriptorSet
 - AllocatedBuffer* uboBuffer
 - buffer offset (position of component data inside buffer)
 - pipeline (hash name)
 - pipelineBitMask
 - materialsChanged
 - texturesChanged

to assign/update a rendering component we use a specialized method, that takes care of initialize the descriptor set.

m_renderer->AssignRenderComponent(entity, configs)
m_renderer->AssignRenderComponent(entity, configs, dsAllocator):
- if buffer is nullptr create one, and set buffer offset to 0.
- if no dsAllocator, use m_renderer.globalDsAllocator
- for the descriptor set create one with 1 ubo and 2 textures
- create default local ds layout
- allocate ds using provided or the engine one
- with the ds set uboBuffer to material properties
- ds.writeImage(image1, assetMamager.get(texture1).data)
- assign defaults to pipelineConfigs
- assign descriptorSets to pipelineConfigs
- pipeline = m_pipelinesManager.createPipeline(pipelineConfigs)
(allocate on the stack)

m_engine->UpdateRenderComponent(entity, configs):
- set textureHasChanged and materialHasChanged
- calculate new pipeline bitmask

what we define with the class method will be preloaded.

TextureAsset setup:
- TextureData data
- file path

TextureAsse init:
- if file loadFromFile, else set data to raw data

MeshAsset setup:
- file path
- MeshData data (vertices, indices)
- AllocatedBuffer indexBuffer
- AllocateDBuffer vertexBuffer
- DeviceAddress vertexBufferAddress

MeshAsset init:
- if file loadFromFile, else set data to raw data
- uploadMesh(data.vertices, data.indices)

glTFAsset setup:
 - textures raw data or file path
 - mesh raw data or file path
 - materials raw data
 - relationship between meshes and textures/material
 - or just the path to the asset
 - AllocatedBuffer buffer
 - Descriptor Allocator

glTFAsset init:
- save the textures raw data in asset folder if necessary
- save the mesh raw data in asset folder if necessary
- create, init and register TextureAssets
- create, init and register MeshAssets

loadIntoScene("gltlf loader asset name"):
- for each mesh asset create an entity with MeshComponent and RenderComponent. For assigning the renderComponent pass the material data of the current mesh.

the assets will be relative to that scene. They can be reused because the data will be stored, and also because once it is initialized we can reference all the loaded assets.

[Transformations graph]

- abbiamo due transform: relative position (in riferimento alla gerarchia) e absolute position (in riferimento al world)

- dentro model_asset non possiamo creare entità quindi abbiamo bisogno di una struttura intermedia. La trasformazione in entity si può fare così:

loadModel("model_name") --> it will create the graph of entities. What If i want to access one in particular? 
	ritorna un puntatore ad una hashmap del tipo: nome node --> puntatore node 

TransformComponent {
	// relative to parent
	position
	rotation
	scale

	[private]
	localMatrix
	worldMatrix
	needsUpdate
}

X.worldMatrix = Parent.worldMatrix * X.localMatrix (recursively)

- ogni scena contiene il così detto scene graph
	- un nodo è una entità
	- ogni volta che aggiungiamo una entity aggiungiamo un nodo
	- abbiamo il metodo setParent(entityChild, entityParent) --> il nodo entityChild ha come gentiore entityParent e entityParent ha come figlio entityChild
	- ogni volta che aggiorniamo un transform dobbiamo settare needsUpdate


- per il rendering:
	- prima di renderizzare fai currScene.updateWorldTransform()
	- renderizza normalmente come hai fatto finora
	

